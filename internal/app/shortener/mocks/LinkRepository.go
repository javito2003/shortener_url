// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/javito2003/shortener_url/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// LinkRepository is an autogenerated mock type for the LinkRepository type
type LinkRepository struct {
	mock.Mock
}

// FindByShortCode provides a mock function with given fields: ctx, shortCode
func (_m *LinkRepository) FindByShortCode(ctx context.Context, shortCode string) (*domain.Link, bool, error) {
	ret := _m.Called(ctx, shortCode)

	if len(ret) == 0 {
		panic("no return value specified for FindByShortCode")
	}

	var r0 *domain.Link
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Link, bool, error)); ok {
		return rf(ctx, shortCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Link); ok {
		r0 = rf(ctx, shortCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, shortCode)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, shortCode)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByUrl provides a mock function with given fields: ctx, url
func (_m *LinkRepository) GetByUrl(ctx context.Context, url string) (*domain.Link, bool, error) {
	ret := _m.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for GetByUrl")
	}

	var r0 *domain.Link
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Link, bool, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Link); ok {
		r0 = rf(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, url)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByUser provides a mock function with given fields: ctx, userID, limit, skip
func (_m *LinkRepository) GetByUser(ctx context.Context, userID string, limit int32, skip int32) ([]*domain.Link, error) {
	ret := _m.Called(ctx, userID, limit, skip)

	if len(ret) == 0 {
		panic("no return value specified for GetByUser")
	}

	var r0 []*domain.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, int32) ([]*domain.Link, error)); ok {
		return rf(ctx, userID, limit, skip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, int32) []*domain.Link); ok {
		r0 = rf(ctx, userID, limit, skip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32, int32) error); ok {
		r1 = rf(ctx, userID, limit, skip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, link
func (_m *LinkRepository) Save(ctx context.Context, link *domain.Link) (*domain.Link, error) {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *domain.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Link) (*domain.Link, error)); ok {
		return rf(ctx, link)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Link) *domain.Link); ok {
		r0 = rf(ctx, link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Link) error); ok {
		r1 = rf(ctx, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLinkRepository creates a new instance of LinkRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLinkRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LinkRepository {
	mock := &LinkRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
